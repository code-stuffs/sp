//MACRO CALL AND MACRO DEFINITION TABLE

#include <stdio.h>
#include <string.h>

#define MAX_MACROS 10
#define MAX_LINES 50
#define MAX_PARAMS 10

typedef struct {
    char name[20];
    int mdtIndex; // Index of macro in MDT
    int paramCount;
} MNTEntry;

typedef struct {
    char line[100];
} MDTEntry;

typedef struct {
    char paramName[20];
    char paramValue[20];
} ParamTableEntry;

MNTEntry mnt[MAX_MACROS];
int mntCount = 0;

MDTEntry mdt[MAX_LINES];
int mdtCount = 0;

ParamTableEntry paramTable[MAX_PARAMS];
int paramCount = 0;

// Function to add a macro to MNT
void addToMNT(char *name, int mdtIndex, int paramCount) {
    strcpy(mnt[mntCount].name, name);
    mnt[mntCount].mdtIndex = mdtIndex;
    mnt[mntCount].paramCount = paramCount;
    mntCount++;
}

// Function to add a line to MDT
void addToMDT(char *line) {
    strcpy(mdt[mdtCount].line, line);
    mdtCount++;
}

// Function to add a parameter to the parameter table
void addToParamTable(char *name, char *value) {
    strcpy(paramTable[paramCount].paramName, name);
    strcpy(paramTable[paramCount].paramValue, value);
    paramCount++;
}

// Function to print the MNT
void printMNT() {
    printf("\nMacro Name Table (MNT):\n");
    printf("Name\tMDT Index\tParam Count\n");
    for (int i = 0; i < mntCount; i++) {
        printf("%s\t%d\t\t%d\n", mnt[i].name, mnt[i].mdtIndex, mnt[i].paramCount);
    }
}

// Function to print the MDT
void printMDT() {
    printf("\nMacro Definition Table (MDT):\n");
    printf("Index\tDefinition\n");
    for (int i = 0; i < mdtCount; i++) {
        printf("%d\t%s\n", i, mdt[i].line);
    }
}

// Function to print the parameter table
void printParamTable() {
    printf("\nParameter Table:\n");
    printf("Param Name\tParam Value\n");
    for (int i = 0; i < paramCount; i++) {
        printf("%s\t\t%s\n", paramTable[i].paramName, paramTable[i].paramValue);
    }
}

// Function to process a macro call
void processMacroCall(char *macroName, char *arguments) {
    int mntIndex = -1;

    // Search for macro in MNT
    for (int i = 0; i < mntCount; i++) {
        if (strcmp(mnt[i].name, macroName) == 0) {
            mntIndex = i;
            break;
        }
    }

    if (mntIndex == -1) {
        printf("Error: Macro %s not found in MNT!\n", macroName);
        return;
    }

    // Parse arguments and assign values to parameter table
    char *arg = strtok(arguments, ", ");
    for (int i = 0; i < mnt[mntIndex].paramCount && arg != NULL; i++) {
        strcpy(paramTable[i].paramValue, arg);
        arg = strtok(NULL, ", ");
    }

    // Print the parameter table
    printParamTable();

    // Macro expansion logic (Optional for now)
    printf("\nExpanding Macro %s:\n", macroName);
    for (int i = mnt[mntIndex].mdtIndex; strcmp(mdt[i].line, "MEND") != 0; i++) {
        printf("%s\n", mdt[i].line);
    }
}

int main() {
    // Hardcoded Macro Definition
    const char *macroCode[] = {
        "MACRO ADDMAC &ARG1, &ARG2",
        "    LDA &ARG1",
        "    ADD &ARG2",
        "    STA RESULT",
        "MEND",
        "MACRO MULMAC &ARG1, &ARG2, &ARG3",
        "    LDA &ARG1",
        "    MUL &ARG2",
        "    SUB &ARG3",
        "    STA PRODUCT",
        "MEND"
    };
    int numLines = sizeof(macroCode) / sizeof(macroCode[0]);

    for (int i = 0; i < numLines; i++) {
        char line[100];
        strcpy(line, macroCode[i]);

        if (strstr(line, "MACRO") == line) {
            // Macro start, extract name and parameters
            char macroName[20], paramList[100];
            sscanf(line, "MACRO %s %[^\n]", macroName, paramList);

            // Parse parameters
            char *token = strtok(paramList, ", ");
            paramCount = 0; // Reset parameter count
            while (token != NULL) {
                addToParamTable(token, "-");
                token = strtok(NULL, ", ");
            }

            // Add macro to MNT
            addToMNT(macroName, mdtCount, paramCount);

        } else if (strcmp(line, "MEND") == 0) {
            // Add end of macro to MDT
            addToMDT(line);

        } else {
            // Add macro line to MDT
            addToMDT(line);
        }
    }

    // Print all tables
    printMNT();
    printMDT();

    return 0;
}
